# Service account impersonation helpers
TERRAFORM_ORG_SA_EMAIL="$(cat .terraform_org_sa_email 2>/dev/null)"
GOOGLE_USER_ACCOUNT_ID="$(cat .google_user_account_id 2>/dev/null)"
FIND_ARGS=(. -type d -iname 'bootstrap' ! -path '*/.terraform/*')
REPO_ROOT_ABS_PATH="$(git rev-parse --show-toplevel)"
BOOTSTRAP_DIR_ABS_PATH="$(cd "${REPO_ROOT_ABS_PATH}" && realpath "$(find "${FIND_ARGS[@]}")")"

if [[ -z "${GOOGLE_USER_ACCOUNT_ID}" ]]; then
  echo "Google user account ID not found, initializing..."
  GOOGLE_USER_ACCOUNT_ID="$(gcloud config list --format="value(core.account)")"
  printf "%s\n" "${GOOGLE_USER_ACCOUNT_ID}" > .google_user_account_id
fi

echo "$BOOTSTRAP_DIR_ABS_PATH"

if [[ -z "${TERRAFORM_ORG_SA_EMAIL}" ]]; then
  echo "Terraform organization service account email not found, initializing..."
  terraform -chdir="${BOOTSTRAP_DIR_ABS_PATH}" init -backend=false -get=false -no-color >/dev/null
  TERRAFORM_ORG_SA_EMAIL="$(terraform -chdir="${BOOTSTRAP_DIR_ABS_PATH}" output -no-color -raw terraform_sa_email)"
  printf "%s\n" "${TERRAFORM_ORG_SA_EMAIL}" > .terraform_org_sa_email
fi

# Service account impersonation configuration
export USER_ACCOUNT_ID="${GOOGLE_USER_ACCOUNT_ID}"
export GOOGLE_IMPERSONATE_SERVICE_ACCOUNT="${TERRAFORM_ORG_SA_EMAIL}"

# Auto-set Terraform variables
KERNEL_NAME="$(uname --kernel-name)"
export TF_VAR_global_kernal_name="${KERNEL_NAME}"
export TF_VAR_global_org_domain="downtownsb.com"
export TF_VAR_global_app_domain="exampleco.downrangedevops.com"

# Terraform backend configuration
export TF_CLI_ARGS_init=-backend-config="bucket=exampleco-tfstate"
